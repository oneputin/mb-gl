(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var measureDistance=require("@turf/distance"),point=require("@turf/helpers").point,bearing=require("@turf/bearing"),destination=require("@turf/destination");module.exports=function(e,r,t){var i;if("Feature"===e.type)i=e.geometry.coordinates;else{if("LineString"!==e.type)throw new Error("input must be a LineString Feature or Geometry");i=e.coordinates}for(var n=0,a=0;a<i.length&&!(r>=n&&a===i.length-1);a++){if(n>=r){var o=r-n;if(o){var u=bearing(i[a],i[a-1])-180,s=destination(i[a],o,u,t);return s}return point(i[a])}n+=measureDistance(i[a],i[a+1],t)}return point(i[i.length-1])};
},{"@turf/bearing":3,"@turf/destination":4,"@turf/distance":5,"@turf/helpers":6}],2:[function(require,module,exports){
var each=require("@turf/meta").coordEach;module.exports=function(r){var e=[1/0,1/0,-(1/0),-(1/0)];return each(r,function(r){e[0]>r[0]&&(e[0]=r[0]),e[1]>r[1]&&(e[1]=r[1]),e[2]<r[0]&&(e[2]=r[0]),e[3]<r[1]&&(e[3]=r[1])}),e};

},{"@turf/meta":10}],3:[function(require,module,exports){
var getCoord=require("@turf/invariant").getCoord;module.exports=function(t,a){var o=Math.PI/180,r=180/Math.PI,h=getCoord(t),M=getCoord(a),e=o*h[0],n=o*M[0],s=o*h[1],i=o*M[1],c=Math.sin(n-e)*Math.cos(i),d=Math.cos(s)*Math.sin(i)-Math.sin(s)*Math.cos(i)*Math.cos(n-e),u=r*Math.atan2(c,d);return u};

},{"@turf/invariant":8}],4:[function(require,module,exports){
var getCoord=require("@turf/invariant").getCoord,helpers=require("@turf/helpers"),point=helpers.point,distanceToRadians=helpers.distanceToRadians;module.exports=function(a,t,s,n){var e=Math.PI/180,i=180/Math.PI,o=getCoord(a),h=e*o[0],r=e*o[1],M=e*s,d=distanceToRadians(t,n),c=Math.asin(Math.sin(r)*Math.cos(d)+Math.cos(r)*Math.sin(d)*Math.cos(M)),p=h+Math.atan2(Math.sin(M)*Math.sin(d)*Math.cos(r),Math.cos(d)-Math.sin(r)*Math.sin(c));return point([i*p,i*c])};

},{"@turf/helpers":6,"@turf/invariant":8}],5:[function(require,module,exports){
var getCoord=require("@turf/invariant").getCoord,radiansToDistance=require("@turf/helpers").radiansToDistance;module.exports=function(t,a,r){var o=Math.PI/180,e=getCoord(t),n=getCoord(a),s=o*(n[1]-e[1]),i=o*(n[0]-e[0]),h=o*e[1],M=o*n[1],d=Math.pow(Math.sin(s/2),2)+Math.pow(Math.sin(i/2),2)*Math.cos(h)*Math.cos(M);return radiansToDistance(2*Math.atan2(Math.sqrt(d),Math.sqrt(1-d)),r)};
},{"@turf/helpers":6,"@turf/invariant":8}],6:[function(require,module,exports){
function feature(e,r){return{type:"Feature",properties:r||{},geometry:e}}module.exports.feature=feature,module.exports.point=function(e,r){if(!Array.isArray(e))throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");return feature({type:"Point",coordinates:e.slice()},r)},module.exports.polygon=function(e,r){if(!e)throw new Error("No coordinates passed");for(var o=0;o<e.length;o++){var t=e[o];if(t.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var n=0;n<t[t.length-1].length;n++)if(t[t.length-1][n]!==t[0][n])throw new Error("First and last Position are not equivalent.")}return feature({type:"Polygon",coordinates:e},r)},module.exports.lineString=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"LineString",coordinates:e},r)},module.exports.featureCollection=function(e){return{type:"FeatureCollection",features:e}},module.exports.multiLineString=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"MultiLineString",coordinates:e},r)},module.exports.multiPoint=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"MultiPoint",coordinates:e},r)},module.exports.multiPolygon=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"MultiPolygon",coordinates:e},r)},module.exports.geometryCollection=function(e,r){return feature({type:"GeometryCollection",geometries:e},r)};var factors={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373};module.exports.radiansToDistance=function(e,r){var o=factors[r||"kilometers"];if(void 0===o)throw new Error("Invalid unit");return e*o},module.exports.distanceToRadians=function(e,r){var o=factors[r||"kilometers"];if(void 0===o)throw new Error("Invalid unit");return e/o},module.exports.distanceToDegrees=function(e,r){var o=factors[r||"kilometers"];if(void 0===o)throw new Error("Invalid unit");return e/o*57.2958};

},{}],7:[function(require,module,exports){
function inRing(n,r){for(var t=!1,e=0,i=r.length-1;e<r.length;i=e++){var o=r[e][0],a=r[e][1],g=r[i][0],v=r[i][1],f=a>n[1]!=v>n[1]&&n[0]<(g-o)*(n[1]-a)/(v-a)+o;f&&(t=!t)}return t}var invariant=require("@turf/invariant");module.exports=function(n,r){var t=invariant.getCoord(n),e=r.geometry.coordinates;"Polygon"===r.geometry.type&&(e=[e]);for(var i=0,o=!1;i<e.length&&!o;i++)if(inRing(t,e[i][0])){for(var a=!1,g=1;g<e[i].length&&!a;)inRing(t,e[i][g])&&(a=!0),g++;a||(o=!0)}return o};

},{"@turf/invariant":8}],8:[function(require,module,exports){
function getCoord(e){if(Array.isArray(e)&&"number"==typeof e[0]&&"number"==typeof e[1])return e;if(e){if("Feature"===e.type&&e.geometry&&"Point"===e.geometry.type&&Array.isArray(e.geometry.coordinates))return e.geometry.coordinates;if("Point"===e.type&&Array.isArray(e.coordinates))return e.coordinates}throw new Error("A coordinate, feature, or point geometry is required")}function geojsonType(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}function featureOf(e,r,t){if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function collectionOf(e,r,t){if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0;o<e.features.length;o++){var n=e.features[o];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}}module.exports.geojsonType=geojsonType,module.exports.collectionOf=collectionOf,module.exports.featureOf=featureOf,module.exports.getCoord=getCoord;

},{}],9:[function(require,module,exports){
function length(e,t){for(var r,n=0,o=point(e[0]),i=point(e[0]),u=1;u<e.length;u++)i.geometry.coordinates=e[u],n+=distance(o,i,t),r=o,o=i,i=r;return n}var distance=require("@turf/distance"),point=require("@turf/helpers").point;module.exports=function e(t,r){if("FeatureCollection"===t.type)return t.features.reduce(function(t,n){return t+e(n,r)},0);var n,o,i="Feature"===t.type?t.geometry:t;if("LineString"===i.type)return length(i.coordinates,r);if("Polygon"===i.type||"MultiLineString"===i.type){for(n=0,o=0;o<i.coordinates.length;o++)n+=length(i.coordinates[o],r);return n}if("MultiPolygon"===t.type){for(n=0,o=0;o<i.coordinates.length;o++)for(var u=0;u<i.coordinates[o].length;u++)n+=length(i.coordinates[o][u],r);return n}throw new Error("input must be a LineString, MultiLineString, Polygon, or MultiPolygon Feature or Geometry (or a FeatureCollection containing only those types)")};

},{"@turf/distance":5,"@turf/helpers":6}],10:[function(require,module,exports){
function coordEach(e,o,t){var r,n,c,l,u,p,i,a,f,s,h=0,d="FeatureCollection"===e.type,y="Feature"===e.type,g=d?e.features.length:1;for(r=0;r<g;r++)for(f=d?e.features[r].geometry:y?e.geometry:e,s="GeometryCollection"===f.type,i=s?f.geometries.length:1,l=0;l<i;l++)if(p=s?f.geometries[l]:f,a=p.coordinates,h=!t||"Polygon"!==p.type&&"MultiPolygon"!==p.type?0:1,"Point"===p.type)o(a);else if("LineString"===p.type||"MultiPoint"===p.type)for(n=0;n<a.length;n++)o(a[n]);else if("Polygon"===p.type||"MultiLineString"===p.type)for(n=0;n<a.length;n++)for(c=0;c<a[n].length-h;c++)o(a[n][c]);else if("MultiPolygon"===p.type)for(n=0;n<a.length;n++)for(c=0;c<a[n].length;c++)for(u=0;u<a[n][c].length-h;u++)o(a[n][c][u]);else{if("GeometryCollection"!==p.type)throw new Error("Unknown Geometry Type");for(n=0;n<p.geometries.length;n++)coordEach(p.geometries[n],o,t)}}function coordReduce(e,o,t,r){return coordEach(e,function(e){t=o(t,e)},r),t}function propEach(e,o){var t;switch(e.type){case"FeatureCollection":for(t=0;t<e.features.length;t++)o(e.features[t].properties);break;case"Feature":o(e.properties)}}function propReduce(e,o,t){return propEach(e,function(e){t=o(t,e)}),t}function featureEach(e,o){if("Feature"===e.type)o(e);else if("FeatureCollection"===e.type)for(var t=0;t<e.features.length;t++)o(e.features[t])}function coordAll(e){var o=[];return coordEach(e,function(e){o.push(e)}),o}module.exports.coordEach=coordEach,module.exports.coordReduce=coordReduce,module.exports.propEach=propEach,module.exports.propReduce=propReduce,module.exports.featureEach=featureEach,module.exports.coordAll=coordAll;

},{}],11:[function(require,module,exports){
var distance=require("@turf/distance");module.exports=function(e,r){for(var t,a=1/0,s=0;s<r.features.length;s++){var u=distance(e,r.features[s],"miles");u<a&&(t=r.features[s],a=u)}return t};

},{"@turf/distance":5}],12:[function(require,module,exports){
function pointOnLine(e,t,r){for(var i=point([1/0,1/0],{dist:1/0}),n=0;n<t.length-1;n++){var o=point(t[n]),s=point(t[n+1]);o.properties.dist=distance(e,o,r),s.properties.dist=distance(e,s,r);var p,d=Math.max(o.properties.dist,s.properties.dist),a=bearing(o,s),u=destination(e,d,a+90,r),c=destination(e,d,a-90,r),y=lineIntersects(u.geometry.coordinates[0],u.geometry.coordinates[1],c.geometry.coordinates[0],c.geometry.coordinates[1],o.geometry.coordinates[0],o.geometry.coordinates[1],s.geometry.coordinates[0],s.geometry.coordinates[1]);y&&(p=point(y),p.properties.dist=distance(e,p,r)),o.properties.dist<i.properties.dist&&(i=o,i.properties.index=n),s.properties.dist<i.properties.dist&&(i=s,i.properties.index=n),p&&p.properties.dist<i.properties.dist&&(i=p,i.properties.index=n)}return i}function lineIntersects(e,t,r,i,n,o,s,p){var d,a,u,c,y,g={x:null,y:null,onLine1:!1,onLine2:!1};return d=(p-o)*(r-e)-(s-n)*(i-t),0===d?null!==g.x&&null!==g.y&&g:(a=t-o,u=e-n,c=(s-n)*a-(p-o)*u,y=(r-e)*a-(i-t)*u,a=c/d,u=y/d,g.x=e+a*(r-e),g.y=t+a*(i-t),a>0&&a<1&&(g.onLine1=!0),u>0&&u<1&&(g.onLine2=!0),!(!g.onLine1||!g.onLine2)&&[g.x,g.y])}var distance=require("@turf/distance"),point=require("@turf/helpers").point,bearing=require("@turf/bearing"),destination=require("@turf/destination");module.exports=function(e,t,r){var i;if("Feature"===e.type)i=e.geometry.coordinates;else{if("LineString"!==e.type)throw new Error("input must be a LineString Feature or Geometry");i=e.coordinates}return pointOnLine(t,i,r||"miles")};

},{"@turf/bearing":3,"@turf/destination":4,"@turf/distance":5,"@turf/helpers":6}],13:[function(require,module,exports){
module.exports={along:require("@turf/along"),bbox:require("@turf/bbox"),bearing:require("@turf/bearing"),inside:require("@turf/inside"),helpers:require("@turf/helpers"),lineDistance:require("@turf/line-distance"),nearest:require("@turf/nearest"),pointOnLine:require("@turf/point-on-line")};
},{"@turf/along":1,"@turf/bbox":2,"@turf/bearing":3,"@turf/helpers":6,"@turf/inside":7,"@turf/line-distance":9,"@turf/nearest":11,"@turf/point-on-line":12}]},{},[13])(13)
});